<sectionv title="type">The value of this keyword MUST be either a string or an array. If it is an array, elements of the array MUST be strings and MUST be unique.\\n\\nString values MUST be one of the six primitive types ("null", "boolean", "object", "array", "number", or "string"), or "integer" which matches any number with a zero fractional part.\\n\\nAn instance validates if and only if the instance is in any of the sets listed for this keyword.\\n\\n
<sectiona title="enum">The value of this keyword MUST be an array. This array SHOULD have at least one element. Elements in the array SHOULD be unique.\\n\\nAn instance validates successfully against this keyword if its value is equal to one of the elements in this keyword's array value.\\n\\nElements in the array might be of any value, including null.\\n\\n
<sectionv title="const">The value of this keyword MAY be of any type, including null.\\n\\nAn instance validates successfully against this keyword if its value is equal to the value of the keyword.\\n\\n
<sectionv title="multipleOf">The value of "multipleOf" MUST be a number, strictly greater than 0.\\n\\nA numeric instance is valid only if division by this keyword's value results in an integer.\\n\\n
<sectionv title="maximum">The value of "maximum" MUST be a number, representing an inclusive upper limit for a numeric instance.\\n\\nIf the instance is a number, then this keyword validates only if the instance is less than or exactly equal to "maximum".\\n\\n
<sectionv title="exclusiveMaximum">The value of "exclusiveMaximum" MUST be number, representing an exclusive upper limit for a numeric instance.\\n\\nIf the instance is a number, then the instance is valid only if it has a value strictly less than (not equal to) "exclusiveMaximum".\\n\\n
<sectionv title="minimum">The value of "minimum" MUST be a number, representing an inclusive lower limit for a numeric instance.\\n\\nIf the instance is a number, then this keyword validates only if the instance is greater than or exactly equal to "minimum".\\n\\n
<sectionv title="exclusiveMinimum">The value of "exclusiveMinimum" MUST be number, representing an exclusive lower limit for a numeric instance.\\n\\nIf the instance is a number, then the instance is valid only if it has a value strictly greater than (not equal to) "exclusiveMinimum".\\n\\n
<sectionv title="maxLength">The value of this keyword MUST be a non-negative integer.\\n\\nA string instance is valid against this keyword if its length is less than, or equal to, the value of this keyword.\\n\\nThe length of a string instance is defined as the number of its characters as defined by <xref target="RFC7159">RFC 7159</xref>.\\n\\n
<sectionv title="minLength">The value of this keyword MUST be a non-negative integer.\\n\\nA string instance is valid against this keyword if its length is greater than, or equal to, the value of this keyword.\\n\\nThe length of a string instance is defined as the number of its characters as defined by <xref target="RFC7159">RFC 7159</xref>.\\n\\nOmitting this keyword has the same behavior as a value of 0.\\n\\n
<sectionv title="pattern">The value of this keyword MUST be a string. This string SHOULD be a valid regular expression, according to the ECMA 262 regular expression dialect.\\n\\nA string instance is considered valid if the regular expression matches the instance successfully. Recall: regular expressions are not implicitly anchored.\\n\\n
<sectiono title="items">The value of "items" MUST be either a valid JSON Schema or an array of valid JSON Schemas.\\n\\nThis keyword determines how child instances validate for arrays, and does not directly validate the immediate instance itself.\\n\\nIf "items" is a schema, validation succeeds if all elements in the array successfully validate against that schema.\\n\\nIf "items" is an array of schemas, validation succeeds if each element of the instance validates against the schema at the same position, if any.\\n\\nOmitting this keyword has the same behavior as an empty schema.\\n\\n
<sectiono title="additionalItems">The value of "additionalItems" MUST be a valid JSON Schema.\\n\\nThis keyword determines how child instances validate for arrays, and does not directly validate the immediate instance itself.\\n\\nIf "items" is an array of schemas, validation succeeds if every instance element at a position greater than the size of "items" validates against "additionalItems".\\n\\nOtherwise, "additionalItems" MUST be ignored, as the "items" schema (possibly the default value of an empty schema) is applied to all elements.\\n\\nOmitting this keyword has the same behavior as an empty schema.\\n\\n
<sectionv title="maxItems">The value of this keyword MUST be a non-negative integer.\\n\\nAn array instance is valid against "maxItems" if its size is less than, or equal to, the value of this keyword.\\n\\n
<sectionv title="minItems">The value of this keyword MUST be a non-negative integer.\\n\\nAn array instance is valid against "minItems" if its size is greater than, or equal to, the value of this keyword.\\n\\nOmitting this keyword has the same behavior as a value of 0.\\n\\n
<sectionv title="uniqueItems">The value of this keyword MUST be a boolean.\\n\\nIf this keyword has boolean value false, the instance validates successfully. If it has boolean value true, the instance validates successfully if all of its elements are unique.\\n\\nOmitting this keyword has the same behavior as a value of false.\\n\\n
<sectiono title="contains">The value of this keyword MUST be a valid JSON Schema.\\n\\nAn array instance is valid against "contains" if at least one of its elements is valid against the given schema.\\n\\n
<sectionv title="maxProperties">The value of this keyword MUST be a non-negative integer.\\n\\nAn object instance is valid against "maxProperties" if its number of properties is less than, or equal to, the value of this keyword.\\n\\n
<sectionv title="minProperties">The value of this keyword MUST be a non-negative integer.\\n\\nAn object instance is valid against "minProperties" if its number of properties is greater than, or equal to, the value of this keyword.\\n\\nOmitting this keyword has the same behavior as a value of 0.\\n\\n
<sectiona title="required">The value of this keyword MUST be an array. Elements of this array, if any, MUST be strings, and MUST be unique.\\n\\nAn object instance is valid against this keyword if every item in the array is the name of a property in the instance.\\n\\nOmitting this keyword has the same behavior as an empty array.\\n\\n
<sectiono title="properties">The value of "properties" MUST be an object. Each value of this object MUST be a valid JSON Schema.\\n\\nThis keyword determines how child instances validate for objects, and does not directly validate the immediate instance itself.\\n\\nValidation succeeds if, for each name that appears in both the instance and as a name within this keyword's value, the child instance for that name successfully validates against the corresponding schema.\\n\\nOmitting this keyword has the same behavior as an empty object.\\n\\n
<sectiono title="patternProperties">The value of "patternProperties" MUST be an object. Each property name of this object SHOULD be a valid regular expression, according to the ECMA 262 regular expression dialect. Each property value of this object MUST be a valid JSON Schema.\\n\\nThis keyword determines how child instances validate for objects, and does not directly validate the immediate instance itself. Validation of the primitive instance type against this keyword always succeeds.\\n\\nValidation succeeds if, for each instance name that matches any regular expressions that appear as a property name in this keyword's value, the child instance for that name successfully validates against each schema that corresponds to a matching regular expression.\\n\\nOmitting this keyword has the same behavior as an empty object.\\n\\n
<sectiono title="additionalProperties">The value of "additionalProperties" MUST be a valid JSON Schema.\\n\\nThis keyword determines how child instances validate for objects, and does not directly validate the immediate instance itself.\\n\\nValidation with "additionalProperties" applies only to the child values of instance names that do not match any names in "properties", and do not match any regular expression in "patternProperties".\\n\\nFor all such properties, validation succeeds if the child instance validates against the "additionalProperties" schema.\\n\\nOmitting this keyword has the same behavior as an empty schema.\\n\\n
<sectiono title="propertyNames">The value of "propertyNames" MUST be a valid JSON Schema.\\n\\nIf the instance is an object, this keyword validates if every property name in the instance validates against the provided schema. Note the property name that the schema is testing will always be a string.\\n\\nOmitting this keyword has the same behavior as an empty schema.\\n\\n
<sectiono title="if">This keyword's value MUST be a valid JSON Schema.\\n\\nThis validation outcome of this keyword's subschema has no direct effect on the overall validation result.  Rather, it controls which of the "then" or "else" keywords are evaluated.\\n\\nInstances that successfully validate against this keyword's subschema MUST also be valid against the subschema value of the "then" keyword, if present.\\n\\nInstances that fail to validate against this keyword's subschema MUST also be valid against the subschema value of the "else" keyword, if present.\\n\\nIf <xref target="annotations">annotations</xref> are being collected, they are collected from this keyword's subschema in the usual way, including when the keyword is present without either "then" or "else".\\n\\n
<sectiono title="then">This keyword's value MUST be a valid JSON Schema.\\n\\nWhen "if" is present, and the instance successfully validates against its subschema, then valiation succeeds against this keyword if the instance also successfully validates against this keyword's subschema.\\n\\nThis keyword has no effect when "if" is absent, or when the instance fails to validate against its subschema.  Implementations MUST NOT evaluate the instance against this keyword, for either validation or annotation collection purposes, in such cases.\\n\\n
<sectiono title="else">This keyword's value MUST be a valid JSON Schema.\\n\\nWhen "if" is present, and the instance fails to validate against its subschema, then valiation succeeds against this keyword if the instance successfully validates against this keyword's subschema.\\n\\nThis keyword has no effect when "if" is absent, or when the instance successfully validates against its subschema.  Implementations MUST NOT evaluate the instance against this keyword, for either validation or annotation collection purposes, in such cases.\\n\\n
<sectiono title="allOf">This keyword's value MUST be a non-empty array. Each item of the array MUST be a valid JSON Schema.\\n\\nAn instance validates successfully against this keyword if it validates successfully against all schemas defined by this keyword's value.\\n\\n
<sectiono title="anyOf">This keyword's value MUST be a non-empty array. Each item of the array MUST be a valid JSON Schema.\\n\\nAn instance validates successfully against this keyword if it validates successfully against at least one schema defined by this keyword's value.\\n\\n
<sectiono title="oneOf">This keyword's value MUST be a non-empty array. Each item of the array MUST be a valid JSON Schema.\\n\\nAn instance validates successfully against this keyword if it validates successfully against exactly one schema defined by this keyword's value.\\n\\n
<sectiono title="not">This keyword's value MUST be a valid JSON Schema.\\n\\nAn instance is valid against this keyword if it fails to validate successfully against the schema defined by this keyword.\\n\\n
<sectionv title="contentEncoding">If the instance value is a string, this property defines that the string SHOULD be interpreted as binary data and decoded using the encoding named by this property. <xref target="RFC2045">RFC 2045, Sec 6.1</xref> lists the possible values for this property.\\n\\nThe value of this property MUST be a string.\\n\\nThe value of this property SHOULD be ignored if the instance described is not a string.\\n\\n
<sectionv title="contentMediaType">The value of this property must be a media type, as defined by <xref target="RFC2046">RFC 2046</xref>. This property defines the media type of instances which this schema defines.\\n\\nThe value of this property MUST be a string.\\n\\nThe value of this property SHOULD be ignored if the instance described is not a string.\\n\\nIf the "contentEncoding" property is not present, but the instance value is a string, then the value of this property SHOULD specify a text document type, and the character set SHOULD be the character set into which the JSON string value was decoded (for which the default is Unicode).\\n\\n
<sectiona title="examples">The value of this keyword MUST be an array. There are no restrictions placed on the values within the array. When multiple occurrences of this keyword are applicable to a single sub-instance, implementations MUST provide a flat array of all values rather than an array of arrays.\\n\\nThis keyword can be used to provide sample JSON values associated with a particular schema, for the purpose of illustrating usage.  It is RECOMMENDED that these values be valid against the associated schema.\\n\\nImplementations MAY use the value(s) of "default", if present, as an additional example.  If "examples" is absent, "default" MAY still be used in this manner.\\n\\n
